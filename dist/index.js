/*! For license information please see index.js.LICENSE.txt */
!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t(require("react"));else if("function"==typeof define&&define.amd)define(["react"],t);else{var r="object"==typeof exports?t(require("react")):t(e.react);for(var n in r)("object"==typeof exports?exports:e)[n]=r[n]}}(this,(e=>(()=>{"use strict";var t={506:(e,t,r)=>{var n=r(156),o=Symbol.for("react.element"),i=(Symbol.for("react.fragment"),Object.prototype.hasOwnProperty),a=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,s={key:!0,ref:!0,__self:!0,__source:!0};function c(e,t,r){var n,c={},u=null,p=null;for(n in void 0!==r&&(u=""+r),void 0!==t.key&&(u=""+t.key),void 0!==t.ref&&(p=t.ref),t)i.call(t,n)&&!s.hasOwnProperty(n)&&(c[n]=t[n]);if(e&&e.defaultProps)for(n in t=e.defaultProps)void 0===c[n]&&(c[n]=t[n]);return{$$typeof:o,type:e,key:u,ref:p,props:c,_owner:a.current}}t.jsx=c,t.jsxs=c},425:(e,t,r)=>{e.exports=r(506)},788:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r="",n=void 0!==t[5];return t[4]&&(r+="@supports (".concat(t[4],") {")),t[2]&&(r+="@media ".concat(t[2]," {")),n&&(r+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),r+=e(t),n&&(r+="}"),t[2]&&(r+="}"),t[4]&&(r+="}"),r})).join("")},t.i=function(e,r,n,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(n)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var u=0;u<e.length;u++){var p=[].concat(e[u]);n&&a[p[0]]||(void 0!==i&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=i),r&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=r):p[2]=r),o&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=o):p[4]="".concat(o)),t.push(p))}},t}},327:e=>{e.exports=function(e){var t=e[1],r=e[3];if(!r)return t;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},400:(e,t,r)=>{r.d(t,{Z:()=>s});var n=r(327),o=r.n(n),i=r(788),a=r.n(i)()(o());a.push([e.id,".message {\r\n    position: fixed;\r\n    z-index: 1000;\r\n    border-radius: 3px;\r\n    border: 1px solid rgb(215, 215, 215);\r\n    background-color: rgb(235, 235, 235);\r\n    padding: 0.8rem 1rem;\r\n    text-align: center;\r\n    transition: top 0.5s ease-out, visibility 0.3s ease-in, opacity 0.3s ease-in;\r\n    visibility: hidden;\r\n}","",{version:3,sources:["webpack://./src/message.css"],names:[],mappings:"AAAA;IACI,eAAe;IACf,aAAa;IACb,kBAAkB;IAClB,oCAAoC;IACpC,oCAAoC;IACpC,oBAAoB;IACpB,kBAAkB;IAClB,4EAA4E;IAC5E,kBAAkB;AACtB",sourcesContent:[".message {\r\n    position: fixed;\r\n    z-index: 1000;\r\n    border-radius: 3px;\r\n    border: 1px solid rgb(215, 215, 215);\r\n    background-color: rgb(235, 235, 235);\r\n    padding: 0.8rem 1rem;\r\n    text-align: center;\r\n    transition: top 0.5s ease-out, visibility 0.3s ease-in, opacity 0.3s ease-in;\r\n    visibility: hidden;\r\n}"],sourceRoot:""}]);const s=a},379:e=>{var t=[];function r(e){for(var r=-1,n=0;n<t.length;n++)if(t[n].identifier===e){r=n;break}return r}function n(e,n){for(var i={},a=[],s=0;s<e.length;s++){var c=e[s],u=n.base?c[0]+n.base:c[0],p=i[u]||0,f="".concat(u," ").concat(p);i[u]=p+1;var d=r(f),l={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)t[d].references++,t[d].updater(l);else{var y=o(l,n);n.byIndex=s,t.splice(s,0,{identifier:f,updater:y,references:1})}a.push(f)}return a}function o(e,t){var r=t.domAPI(t);return r.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;r.update(e=t)}else r.remove()}}e.exports=function(e,o){var i=n(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=r(i[a]);t[s].references--}for(var c=n(e,o),u=0;u<i.length;u++){var p=r(i[u]);0===t[p].references&&(t[p].updater(),t.splice(p,1))}i=c}}},569:e=>{var t={};e.exports=function(e,r){var n=function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,r)=>{e.exports=function(e){var t=r.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(r){!function(e,t,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,o&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var i=r.sourceMap;i&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(n,e,t.options)}(t,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},156:t=>{t.exports=e}},r={};function n(e){var o=r[e];if(void 0!==o)return o.exports;var i=r[e]={id:e,exports:{}};return t[e](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nc=void 0;var o={};return(()=>{n.r(o),n.d(o,{Message:()=>I,useMessage:()=>k});var e=n(156),t=n(379),r=n.n(t),i=n(795),a=n.n(i),s=n(569),c=n.n(s),u=n(565),p=n.n(u),f=n(216),d=n.n(f),l=n(589),y=n.n(l),v=n(400),m={};m.styleTagTransform=y(),m.setAttributes=p(),m.insert=c().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=d(),r()(v.Z,m),v.Z&&v.Z.locals&&v.Z.locals;var b=n(425);function g(e){return new Promise((t=>{setTimeout(t,e)}))}const h={info:{color:"blue",emoji:"❕"},success:{color:"darkgreen",emoji:"✅"},warning:{color:"darkorange",emoji:"⚠️"},error:{color:"red",emoji:"❌"}},x=5e3,A=500,C=-50,S=-20,j=(0,e.createContext)();function E({children:t}){const r=(0,e.useRef)([]),n=(0,e.useRef)(0),[o,i]=(0,e.useState)(!1),[a,s]=(0,e.useReducer)(w,[]),c=(0,e.useRef)(a);return(0,e.useLayoutEffect)((()=>{c.current=a}),[a]),(0,e.useEffect)((()=>{if(n.current>0&&n.current===r.current.length&&!o){const e=setTimeout((()=>{n.current=0,s({type:"reset"})}),x);return()=>{clearTimeout(e)}}}),[o]),(0,e.useEffect)((()=>{const e=e=>{const t=r.current[e],n=c.current[e];if(!t&&!n)return;const{top:o,duration:a}=n,{width:s}=t.getBoundingClientRect();t.style.left=`calc(50vw - ${s/2}px)`,t.style.top=o+"px",t.style.visibility="visible";const u=()=>setTimeout((()=>{t.style.top=o+S+"px",t.style.visibility="hidden",t.style.opacity=.3}),1e3*(a+.5));let p=u();return t.addEventListener("pointerenter",(()=>{clearTimeout(p),i(!0)})),t.addEventListener("pointerleave",(()=>{p=u(),i(!1)})),!0};let t=!1;return async function(){for(;!t;)await g(A),e(n.current)&&n.current++}(),()=>{t=!0}}),[]),(0,b.jsxs)(j.Provider,{value:s,children:[t,a.map((({top:e,content:t,type:n,fontSize:o},i)=>(0,b.jsx)("div",{style:{top:e+C+"px",color:h[n].color,fontSize:o+"rem"},className:"message",ref:e=>r.current[i]=e,children:`${h[n].emoji} ${t}`},i)))]})}function w(e,t){switch(t.type){case"add":return[...e,t.payload];case"reset":return[]}}function I(t){const[r,n]=(0,e.useState)(!1);return(0,e.useEffect)((()=>{n(!0)}),[]),r?(0,b.jsx)(E,{...t}):null}const _={top:100,duration:1.5,content:"请输入内容",type:"info",fontSize:1},T=["info","success","warning","error"];function k(){const t=(0,e.useContext)(j);return(0,e.useMemo)((()=>({show(e){const r=function({top:e,duration:t,content:r,type:n,fontSize:o}={}){let i=!1,a=!1,s=!1,c=!1,u=!1;return"number"==typeof e&&e>=50&&(i=!0),"number"==typeof t&&t>=.5&&t<=4.5&&(a=!0),"string"==typeof r&&r.length<=50&&(s=!0),T.includes(n)&&(c=!0),"number"==typeof o&&o>0&&(u=!0),{top:i,duration:a,content:s,type:c,fontSize:u}}(e);t({type:"add",payload:{top:r.top?e.top:_.top,duration:r.duration?e.duration:_.duration,content:r.content?e.content:_.content,type:r.type?e.type:_.type,fontSize:r.fontSize?e.fontSize:_.fontSize}})}})),[t])}})(),o})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,